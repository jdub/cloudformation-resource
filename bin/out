#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

jq . < /dev/stdin > /tmp/input

SRC=$1

STACK=$(jq -r '.source.stack // empty' /tmp/input)

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // empty' /tmp/input)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // empty' /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r '.source.region // empty' /tmp/input)

TEMPLATE=$(jq -r '.params.template // empty' /tmp/input)

CAPABILITIES="--capabilities $(jq -r '[.params.capabilities // empty] | flatten | join(" ")' /tmp/input)"


fill_params() {
  local IPATH=$1
  local INPUT=$2
  (echo '{'
  jq -r "$IPATH"' | to_entries | map([.key, .value | tostring])[] | join(" ")' "$INPUT" | while read KEY FILE; do
    if [ -f "$SRC/$FILE" ]; then
      echo -n '  "'$KEY'": '
      if jq -M . "$SRC/$FILE" 2> /dev/null; then :; else
        jq -MR '.' "$SRC/$FILE"
      fi
      echo ","
    else
      # FIXME: doesn't deal with arrays/objects
      echo '  "'$KEY'": "'$FILE'",'
    fi
  done
  echo '"":null}') | jq -M 'del(."")'
}


# Should we upload or reference a template?
if expr match "$TEMPLATE" 'http' > /dev/null; then
  UPLOAD="--template-url $TEMPLATE"
  REMOTE=true
else
  UPLOAD="--template-file file://${SRC}/${TEMPLATE}"
  REMOTE=false
fi

# Check local template is valid JSON before doing any network operations
if [ $REMOTE == "false" ]; then
  jq . $SRC/$TEMPLATE > /dev/null
fi

# Should we create or update the stack? (Check existence by way of get-template.)
if aws cloudformation get-template --stack-name "$STACK" > /tmp/template.json 2> /dev/null; then
  ACTION=update-stack
  WAIT=stack-update-complete

  echo "Updating '$STACK'..."
  echo

  # Should we tell CloudFormation to use the previous template?
  if [ $REMOTE == "false" ]; then
    jq --sort-keys '.TemplateBody' /tmp/template.json > /tmp/cur.json
    jq --sort-keys . $SRC/$TEMPLATE > /tmp/new.json

    if cmp -s /tmp/cur.json /tmp/new.json; then
      UPLOAD="--use-previous-template"
    fi
  fi

  aws cloudformation describe-stacks \
    --stack-name "$STACK" \
    --query 'Stacks[0]' > /tmp/stack.json

  # Merge stack parameters with provided parameters
  fill_params '.params.parameters' /tmp/input > /tmp/params.json
  jq '.Parameters | map({key: .ParameterKey, value: $params[(.ParameterKey)]}) | map({ParameterKey: .key} + if .value then {ParameterValue: .value} else {UsePreviousValue: true} end)' /tmp/stack.json --argfile params /tmp/params.json > /tmp/stack-params.json

else
  ACTION=create-stack
  WAIT=stack-create-complete

  echo "Creating '$STACK'..."
  echo

  # Produce stack parameters
  fill_params '.params.parameters' /tmp/input > /tmp/params.json
  jq 'to_entries | map({ParameterKey: .key, ParameterValue: .value})' /tmp/params.json > /tmp/stack-params.json
fi


TOUCHED=$(date -u +%FT%T.000Z)
COMPLETE=false

if STACK_ID=$(aws cloudformation $ACTION \
    --stack-name "$STACK" $UPLOAD \
    --parameters file:///tmp/stack-params.json \
    $CAPABILITIES --query 'StackId' --output text 2> /tmp/stack-output); then :; else
  cat /tmp/stack-output
  if grep -q 'No updates are to be performed' /tmp/stack-output; then
    exit 0
  else
    exit 1
  fi
fi

echo "Status                         | Type                           | Logical Resource ID            | Reason"

while [ "$COMPLETE" == "false" ]; do
  sleep 3

  aws cloudformation describe-stack-events \
    --stack-name "$STACK_ID" \
    --max-items 20 \
    --query 'StackEvents' | jq 'map(select(.Timestamp > "'$TOUCHED'"))' > /tmp/events.json

  jq -r 'def pad($l): .[:$l] + ($l - (. | length)) * " "; reverse | map([(.ResourceStatus | pad(30)), (.ResourceType | pad(30)), (.LogicalResourceId | pad(30)), .ResourceStatusReason])[] | join(" | ")' /tmp/events.json

  # FIXME: we should probably have a maximum number of iterations to approximate a timeout
  # FIXME: should we also watch substacks when they come across our log?

  COMPLETE=$(jq --arg stack "$STACK" -r '.[0].ResourceType == "AWS::CloudFormation::Stack" and .[0].LogicalResourceId == $stack and (.[0].ResourceStatus // "" | (endswith("_COMPLETE") or endswith("_FAILED")))' /tmp/events.json)
  TOUCHED=$(jq -r '.[0].Timestamp // "'$TOUCHED'"' /tmp/events.json)
done


# We consider anything that wasn't CREATE/UPDATE_COMPLETE to be a failure
if jq -er '.[0].ResourceStatus != ("CREATE_COMPLETE" | "UPDATE_COMPLETE")' /tmp/events.json > /dev/null; then
  exit 1
fi

aws cloudformation describe-stacks \
  --stack-name "$STACK" \
  --query 'Stacks[0]' > /tmp/stack.json

# Pretty-print stack outputs
echo
jq -r '.Outputs | map([.OutputKey, .OutputValue])[] | join(": ")' /tmp/stack.json

# Return create/update time as version
jq '{version: {updated: (.LastUpdatedTime // .CreationTime)}}' /tmp/stack.json >&3
